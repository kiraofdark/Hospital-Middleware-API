version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: test_coursedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_coursedb"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: .
    container_name: go_hospital_middleware
    environment:
      DB_HOST: db               # Connect to the 'db' service name
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: test_coursedb
      JWT_SECRET_KEY: your_super_secret_jwt_key_here_please_change_this_in_production! # Change this!
      GIN_MODE: debug           # Set to 'release' for production
      PORT: 8080                # Port for the Go app internal
    ports:
      - "8080:8080"             # Expose app port for direct access (optional, Nginx handles main access)
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before starting app
    restart: on-failure

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"                  # Expose Nginx on port 80
      - "443:443"                # Expose Nginx on port 443 for HTTPS (if configured)
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # Mount Nginx config
    depends_on:
      - app                     # Nginx depends on the Go app
    restart: on-failure

volumes:
  pg_data:
